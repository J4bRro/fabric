/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 4184.0, "series": [{"data": [[0.0, 3.0], [0.1, 11.0], [0.2, 19.0], [0.3, 812.0], [0.4, 1284.0], [0.5, 1615.0], [0.6, 1756.0], [0.7, 1870.0], [0.8, 1898.0], [0.9, 1909.0], [1.0, 1914.0], [1.1, 1917.0], [1.2, 1920.0], [1.3, 1923.0], [1.4, 1925.0], [1.5, 1927.0], [1.6, 1928.0], [1.7, 1930.0], [1.8, 1932.0], [1.9, 1933.0], [2.0, 1934.0], [2.1, 1935.0], [2.2, 1936.0], [2.3, 1937.0], [2.4, 1938.0], [2.5, 1939.0], [2.6, 1941.0], [2.7, 1941.0], [2.8, 1942.0], [2.9, 1943.0], [3.0, 1944.0], [3.1, 1945.0], [3.2, 1946.0], [3.3, 1947.0], [3.4, 1948.0], [3.5, 1948.0], [3.6, 1949.0], [3.7, 1950.0], [3.8, 1951.0], [3.9, 1951.0], [4.0, 1952.0], [4.1, 1953.0], [4.2, 1953.0], [4.3, 1954.0], [4.4, 1955.0], [4.5, 1956.0], [4.6, 1956.0], [4.7, 1957.0], [4.8, 1957.0], [4.9, 1958.0], [5.0, 1959.0], [5.1, 1959.0], [5.2, 1960.0], [5.3, 1960.0], [5.4, 1961.0], [5.5, 1961.0], [5.6, 1962.0], [5.7, 1962.0], [5.8, 1963.0], [5.9, 1964.0], [6.0, 1964.0], [6.1, 1965.0], [6.2, 1965.0], [6.3, 1966.0], [6.4, 1966.0], [6.5, 1967.0], [6.6, 1967.0], [6.7, 1968.0], [6.8, 1968.0], [6.9, 1969.0], [7.0, 1969.0], [7.1, 1970.0], [7.2, 1970.0], [7.3, 1970.0], [7.4, 1971.0], [7.5, 1971.0], [7.6, 1972.0], [7.7, 1972.0], [7.8, 1973.0], [7.9, 1973.0], [8.0, 1973.0], [8.1, 1974.0], [8.2, 1974.0], [8.3, 1975.0], [8.4, 1975.0], [8.5, 1975.0], [8.6, 1976.0], [8.7, 1976.0], [8.8, 1977.0], [8.9, 1977.0], [9.0, 1977.0], [9.1, 1978.0], [9.2, 1978.0], [9.3, 1979.0], [9.4, 1979.0], [9.5, 1979.0], [9.6, 1980.0], [9.7, 1980.0], [9.8, 1980.0], [9.9, 1981.0], [10.0, 1981.0], [10.1, 1981.0], [10.2, 1982.0], [10.3, 1982.0], [10.4, 1983.0], [10.5, 1983.0], [10.6, 1983.0], [10.7, 1983.0], [10.8, 1984.0], [10.9, 1984.0], [11.0, 1984.0], [11.1, 1985.0], [11.2, 1985.0], [11.3, 1985.0], [11.4, 1986.0], [11.5, 1986.0], [11.6, 1986.0], [11.7, 1987.0], [11.8, 1987.0], [11.9, 1987.0], [12.0, 1988.0], [12.1, 1988.0], [12.2, 1988.0], [12.3, 1988.0], [12.4, 1989.0], [12.5, 1989.0], [12.6, 1989.0], [12.7, 1990.0], [12.8, 1990.0], [12.9, 1990.0], [13.0, 1990.0], [13.1, 1991.0], [13.2, 1991.0], [13.3, 1991.0], [13.4, 1992.0], [13.5, 1992.0], [13.6, 1992.0], [13.7, 1992.0], [13.8, 1993.0], [13.9, 1993.0], [14.0, 1993.0], [14.1, 1994.0], [14.2, 1994.0], [14.3, 1994.0], [14.4, 1994.0], [14.5, 1995.0], [14.6, 1995.0], [14.7, 1995.0], [14.8, 1995.0], [14.9, 1996.0], [15.0, 1996.0], [15.1, 1996.0], [15.2, 1996.0], [15.3, 1997.0], [15.4, 1997.0], [15.5, 1997.0], [15.6, 1997.0], [15.7, 1998.0], [15.8, 1998.0], [15.9, 1998.0], [16.0, 1998.0], [16.1, 1999.0], [16.2, 1999.0], [16.3, 1999.0], [16.4, 1999.0], [16.5, 2000.0], [16.6, 2000.0], [16.7, 2000.0], [16.8, 2000.0], [16.9, 2001.0], [17.0, 2001.0], [17.1, 2001.0], [17.2, 2001.0], [17.3, 2002.0], [17.4, 2002.0], [17.5, 2002.0], [17.6, 2002.0], [17.7, 2003.0], [17.8, 2003.0], [17.9, 2003.0], [18.0, 2003.0], [18.1, 2004.0], [18.2, 2004.0], [18.3, 2004.0], [18.4, 2004.0], [18.5, 2004.0], [18.6, 2005.0], [18.7, 2005.0], [18.8, 2005.0], [18.9, 2005.0], [19.0, 2006.0], [19.1, 2006.0], [19.2, 2006.0], [19.3, 2006.0], [19.4, 2007.0], [19.5, 2007.0], [19.6, 2007.0], [19.7, 2007.0], [19.8, 2007.0], [19.9, 2008.0], [20.0, 2008.0], [20.1, 2008.0], [20.2, 2008.0], [20.3, 2009.0], [20.4, 2009.0], [20.5, 2009.0], [20.6, 2009.0], [20.7, 2010.0], [20.8, 2010.0], [20.9, 2010.0], [21.0, 2010.0], [21.1, 2010.0], [21.2, 2011.0], [21.3, 2011.0], [21.4, 2011.0], [21.5, 2011.0], [21.6, 2012.0], [21.7, 2012.0], [21.8, 2012.0], [21.9, 2012.0], [22.0, 2012.0], [22.1, 2013.0], [22.2, 2013.0], [22.3, 2013.0], [22.4, 2013.0], [22.5, 2014.0], [22.6, 2014.0], [22.7, 2014.0], [22.8, 2014.0], [22.9, 2014.0], [23.0, 2015.0], [23.1, 2015.0], [23.2, 2015.0], [23.3, 2015.0], [23.4, 2016.0], [23.5, 2016.0], [23.6, 2016.0], [23.7, 2016.0], [23.8, 2017.0], [23.9, 2017.0], [24.0, 2017.0], [24.1, 2017.0], [24.2, 2017.0], [24.3, 2018.0], [24.4, 2018.0], [24.5, 2018.0], [24.6, 2018.0], [24.7, 2018.0], [24.8, 2019.0], [24.9, 2019.0], [25.0, 2019.0], [25.1, 2019.0], [25.2, 2020.0], [25.3, 2020.0], [25.4, 2020.0], [25.5, 2020.0], [25.6, 2020.0], [25.7, 2021.0], [25.8, 2021.0], [25.9, 2021.0], [26.0, 2021.0], [26.1, 2022.0], [26.2, 2022.0], [26.3, 2022.0], [26.4, 2022.0], [26.5, 2022.0], [26.6, 2023.0], [26.7, 2023.0], [26.8, 2023.0], [26.9, 2023.0], [27.0, 2024.0], [27.1, 2024.0], [27.2, 2024.0], [27.3, 2024.0], [27.4, 2024.0], [27.5, 2025.0], [27.6, 2025.0], [27.7, 2025.0], [27.8, 2025.0], [27.9, 2026.0], [28.0, 2026.0], [28.1, 2026.0], [28.2, 2026.0], [28.3, 2026.0], [28.4, 2027.0], [28.5, 2027.0], [28.6, 2027.0], [28.7, 2027.0], [28.8, 2028.0], [28.9, 2028.0], [29.0, 2028.0], [29.1, 2028.0], [29.2, 2028.0], [29.3, 2029.0], [29.4, 2029.0], [29.5, 2029.0], [29.6, 2029.0], [29.7, 2030.0], [29.8, 2030.0], [29.9, 2030.0], [30.0, 2030.0], [30.1, 2031.0], [30.2, 2031.0], [30.3, 2031.0], [30.4, 2031.0], [30.5, 2031.0], [30.6, 2032.0], [30.7, 2032.0], [30.8, 2032.0], [30.9, 2032.0], [31.0, 2033.0], [31.1, 2033.0], [31.2, 2033.0], [31.3, 2033.0], [31.4, 2034.0], [31.5, 2034.0], [31.6, 2034.0], [31.7, 2034.0], [31.8, 2035.0], [31.9, 2035.0], [32.0, 2035.0], [32.1, 2035.0], [32.2, 2036.0], [32.3, 2036.0], [32.4, 2036.0], [32.5, 2036.0], [32.6, 2036.0], [32.7, 2037.0], [32.8, 2037.0], [32.9, 2037.0], [33.0, 2037.0], [33.1, 2038.0], [33.2, 2038.0], [33.3, 2038.0], [33.4, 2038.0], [33.5, 2039.0], [33.6, 2039.0], [33.7, 2039.0], [33.8, 2039.0], [33.9, 2040.0], [34.0, 2040.0], [34.1, 2040.0], [34.2, 2040.0], [34.3, 2041.0], [34.4, 2041.0], [34.5, 2041.0], [34.6, 2042.0], [34.7, 2042.0], [34.8, 2042.0], [34.9, 2042.0], [35.0, 2043.0], [35.1, 2043.0], [35.2, 2043.0], [35.3, 2043.0], [35.4, 2044.0], [35.5, 2044.0], [35.6, 2044.0], [35.7, 2045.0], [35.8, 2045.0], [35.9, 2045.0], [36.0, 2045.0], [36.1, 2046.0], [36.2, 2046.0], [36.3, 2046.0], [36.4, 2046.0], [36.5, 2047.0], [36.6, 2047.0], [36.7, 2047.0], [36.8, 2047.0], [36.9, 2048.0], [37.0, 2048.0], [37.1, 2048.0], [37.2, 2048.0], [37.3, 2049.0], [37.4, 2049.0], [37.5, 2049.0], [37.6, 2050.0], [37.7, 2050.0], [37.8, 2050.0], [37.9, 2050.0], [38.0, 2051.0], [38.1, 2051.0], [38.2, 2051.0], [38.3, 2051.0], [38.4, 2052.0], [38.5, 2052.0], [38.6, 2052.0], [38.7, 2053.0], [38.8, 2053.0], [38.9, 2053.0], [39.0, 2054.0], [39.1, 2054.0], [39.2, 2054.0], [39.3, 2054.0], [39.4, 2055.0], [39.5, 2055.0], [39.6, 2055.0], [39.7, 2055.0], [39.8, 2056.0], [39.9, 2056.0], [40.0, 2056.0], [40.1, 2057.0], [40.2, 2057.0], [40.3, 2057.0], [40.4, 2057.0], [40.5, 2058.0], [40.6, 2058.0], [40.7, 2058.0], [40.8, 2059.0], [40.9, 2059.0], [41.0, 2059.0], [41.1, 2060.0], [41.2, 2060.0], [41.3, 2060.0], [41.4, 2060.0], [41.5, 2061.0], [41.6, 2061.0], [41.7, 2061.0], [41.8, 2062.0], [41.9, 2062.0], [42.0, 2062.0], [42.1, 2063.0], [42.2, 2063.0], [42.3, 2063.0], [42.4, 2063.0], [42.5, 2064.0], [42.6, 2064.0], [42.7, 2064.0], [42.8, 2065.0], [42.9, 2065.0], [43.0, 2065.0], [43.1, 2066.0], [43.2, 2066.0], [43.3, 2066.0], [43.4, 2067.0], [43.5, 2067.0], [43.6, 2067.0], [43.7, 2068.0], [43.8, 2068.0], [43.9, 2068.0], [44.0, 2069.0], [44.1, 2069.0], [44.2, 2069.0], [44.3, 2069.0], [44.4, 2070.0], [44.5, 2070.0], [44.6, 2070.0], [44.7, 2071.0], [44.8, 2071.0], [44.9, 2071.0], [45.0, 2072.0], [45.1, 2072.0], [45.2, 2072.0], [45.3, 2073.0], [45.4, 2073.0], [45.5, 2073.0], [45.6, 2074.0], [45.7, 2074.0], [45.8, 2074.0], [45.9, 2075.0], [46.0, 2075.0], [46.1, 2075.0], [46.2, 2076.0], [46.3, 2076.0], [46.4, 2076.0], [46.5, 2077.0], [46.6, 2077.0], [46.7, 2077.0], [46.8, 2078.0], [46.9, 2078.0], [47.0, 2079.0], [47.1, 2079.0], [47.2, 2079.0], [47.3, 2080.0], [47.4, 2080.0], [47.5, 2080.0], [47.6, 2081.0], [47.7, 2081.0], [47.8, 2081.0], [47.9, 2082.0], [48.0, 2082.0], [48.1, 2082.0], [48.2, 2083.0], [48.3, 2083.0], [48.4, 2083.0], [48.5, 2084.0], [48.6, 2084.0], [48.7, 2084.0], [48.8, 2085.0], [48.9, 2085.0], [49.0, 2085.0], [49.1, 2086.0], [49.2, 2086.0], [49.3, 2086.0], [49.4, 2087.0], [49.5, 2087.0], [49.6, 2088.0], [49.7, 2088.0], [49.8, 2088.0], [49.9, 2089.0], [50.0, 2089.0], [50.1, 2090.0], [50.2, 2090.0], [50.3, 2090.0], [50.4, 2091.0], [50.5, 2091.0], [50.6, 2091.0], [50.7, 2092.0], [50.8, 2092.0], [50.9, 2093.0], [51.0, 2093.0], [51.1, 2093.0], [51.2, 2094.0], [51.3, 2094.0], [51.4, 2095.0], [51.5, 2095.0], [51.6, 2095.0], [51.7, 2096.0], [51.8, 2096.0], [51.9, 2097.0], [52.0, 2097.0], [52.1, 2098.0], [52.2, 2098.0], [52.3, 2098.0], [52.4, 2099.0], [52.5, 2099.0], [52.6, 2100.0], [52.7, 2100.0], [52.8, 2101.0], [52.9, 2101.0], [53.0, 2101.0], [53.1, 2102.0], [53.2, 2102.0], [53.3, 2103.0], [53.4, 2103.0], [53.5, 2104.0], [53.6, 2104.0], [53.7, 2104.0], [53.8, 2105.0], [53.9, 2105.0], [54.0, 2106.0], [54.1, 2106.0], [54.2, 2107.0], [54.3, 2107.0], [54.4, 2108.0], [54.5, 2108.0], [54.6, 2108.0], [54.7, 2109.0], [54.8, 2109.0], [54.9, 2110.0], [55.0, 2110.0], [55.1, 2111.0], [55.2, 2111.0], [55.3, 2111.0], [55.4, 2112.0], [55.5, 2112.0], [55.6, 2113.0], [55.7, 2113.0], [55.8, 2114.0], [55.9, 2114.0], [56.0, 2115.0], [56.1, 2115.0], [56.2, 2115.0], [56.3, 2116.0], [56.4, 2116.0], [56.5, 2117.0], [56.6, 2117.0], [56.7, 2118.0], [56.8, 2118.0], [56.9, 2119.0], [57.0, 2119.0], [57.1, 2120.0], [57.2, 2120.0], [57.3, 2120.0], [57.4, 2121.0], [57.5, 2121.0], [57.6, 2122.0], [57.7, 2122.0], [57.8, 2123.0], [57.9, 2123.0], [58.0, 2124.0], [58.1, 2124.0], [58.2, 2125.0], [58.3, 2125.0], [58.4, 2126.0], [58.5, 2126.0], [58.6, 2127.0], [58.7, 2127.0], [58.8, 2128.0], [58.9, 2128.0], [59.0, 2129.0], [59.1, 2129.0], [59.2, 2130.0], [59.3, 2130.0], [59.4, 2131.0], [59.5, 2131.0], [59.6, 2132.0], [59.7, 2132.0], [59.8, 2133.0], [59.9, 2133.0], [60.0, 2134.0], [60.1, 2134.0], [60.2, 2135.0], [60.3, 2135.0], [60.4, 2136.0], [60.5, 2136.0], [60.6, 2137.0], [60.7, 2138.0], [60.8, 2138.0], [60.9, 2139.0], [61.0, 2139.0], [61.1, 2140.0], [61.2, 2140.0], [61.3, 2141.0], [61.4, 2142.0], [61.5, 2142.0], [61.6, 2143.0], [61.7, 2144.0], [61.8, 2144.0], [61.9, 2145.0], [62.0, 2145.0], [62.1, 2146.0], [62.2, 2147.0], [62.3, 2147.0], [62.4, 2148.0], [62.5, 2148.0], [62.6, 2149.0], [62.7, 2149.0], [62.8, 2150.0], [62.9, 2151.0], [63.0, 2151.0], [63.1, 2152.0], [63.2, 2152.0], [63.3, 2153.0], [63.4, 2154.0], [63.5, 2154.0], [63.6, 2155.0], [63.7, 2156.0], [63.8, 2156.0], [63.9, 2157.0], [64.0, 2157.0], [64.1, 2158.0], [64.2, 2159.0], [64.3, 2159.0], [64.4, 2160.0], [64.5, 2161.0], [64.6, 2161.0], [64.7, 2162.0], [64.8, 2163.0], [64.9, 2163.0], [65.0, 2164.0], [65.1, 2165.0], [65.2, 2165.0], [65.3, 2166.0], [65.4, 2167.0], [65.5, 2168.0], [65.6, 2168.0], [65.7, 2169.0], [65.8, 2170.0], [65.9, 2171.0], [66.0, 2171.0], [66.1, 2172.0], [66.2, 2173.0], [66.3, 2174.0], [66.4, 2174.0], [66.5, 2175.0], [66.6, 2176.0], [66.7, 2177.0], [66.8, 2178.0], [66.9, 2179.0], [67.0, 2179.0], [67.1, 2180.0], [67.2, 2181.0], [67.3, 2182.0], [67.4, 2183.0], [67.5, 2183.0], [67.6, 2184.0], [67.7, 2185.0], [67.8, 2186.0], [67.9, 2186.0], [68.0, 2187.0], [68.1, 2188.0], [68.2, 2189.0], [68.3, 2190.0], [68.4, 2190.0], [68.5, 2191.0], [68.6, 2192.0], [68.7, 2193.0], [68.8, 2194.0], [68.9, 2195.0], [69.0, 2196.0], [69.1, 2196.0], [69.2, 2197.0], [69.3, 2198.0], [69.4, 2199.0], [69.5, 2200.0], [69.6, 2201.0], [69.7, 2202.0], [69.8, 2203.0], [69.9, 2204.0], [70.0, 2205.0], [70.1, 2206.0], [70.2, 2207.0], [70.3, 2208.0], [70.4, 2209.0], [70.5, 2210.0], [70.6, 2211.0], [70.7, 2212.0], [70.8, 2213.0], [70.9, 2214.0], [71.0, 2215.0], [71.1, 2216.0], [71.2, 2217.0], [71.3, 2218.0], [71.4, 2219.0], [71.5, 2220.0], [71.6, 2221.0], [71.7, 2223.0], [71.8, 2224.0], [71.9, 2225.0], [72.0, 2226.0], [72.1, 2227.0], [72.2, 2228.0], [72.3, 2229.0], [72.4, 2230.0], [72.5, 2231.0], [72.6, 2232.0], [72.7, 2234.0], [72.8, 2235.0], [72.9, 2236.0], [73.0, 2237.0], [73.1, 2238.0], [73.2, 2240.0], [73.3, 2241.0], [73.4, 2242.0], [73.5, 2243.0], [73.6, 2244.0], [73.7, 2245.0], [73.8, 2247.0], [73.9, 2248.0], [74.0, 2250.0], [74.1, 2251.0], [74.2, 2252.0], [74.3, 2253.0], [74.4, 2254.0], [74.5, 2256.0], [74.6, 2257.0], [74.7, 2258.0], [74.8, 2259.0], [74.9, 2261.0], [75.0, 2262.0], [75.1, 2264.0], [75.2, 2265.0], [75.3, 2266.0], [75.4, 2268.0], [75.5, 2269.0], [75.6, 2270.0], [75.7, 2271.0], [75.8, 2273.0], [75.9, 2274.0], [76.0, 2275.0], [76.1, 2276.0], [76.2, 2278.0], [76.3, 2279.0], [76.4, 2281.0], [76.5, 2282.0], [76.6, 2284.0], [76.7, 2285.0], [76.8, 2286.0], [76.9, 2288.0], [77.0, 2289.0], [77.1, 2290.0], [77.2, 2291.0], [77.3, 2293.0], [77.4, 2294.0], [77.5, 2295.0], [77.6, 2297.0], [77.7, 2298.0], [77.8, 2299.0], [77.9, 2300.0], [78.0, 2302.0], [78.1, 2303.0], [78.2, 2304.0], [78.3, 2306.0], [78.4, 2307.0], [78.5, 2308.0], [78.6, 2309.0], [78.7, 2311.0], [78.8, 2312.0], [78.9, 2313.0], [79.0, 2314.0], [79.1, 2315.0], [79.2, 2317.0], [79.3, 2318.0], [79.4, 2319.0], [79.5, 2321.0], [79.6, 2322.0], [79.7, 2324.0], [79.8, 2325.0], [79.9, 2326.0], [80.0, 2327.0], [80.1, 2329.0], [80.2, 2330.0], [80.3, 2331.0], [80.4, 2332.0], [80.5, 2334.0], [80.6, 2335.0], [80.7, 2336.0], [80.8, 2338.0], [80.9, 2339.0], [81.0, 2340.0], [81.1, 2342.0], [81.2, 2343.0], [81.3, 2345.0], [81.4, 2346.0], [81.5, 2348.0], [81.6, 2350.0], [81.7, 2351.0], [81.8, 2353.0], [81.9, 2354.0], [82.0, 2356.0], [82.1, 2357.0], [82.2, 2359.0], [82.3, 2360.0], [82.4, 2361.0], [82.5, 2362.0], [82.6, 2364.0], [82.7, 2365.0], [82.8, 2366.0], [82.9, 2367.0], [83.0, 2369.0], [83.1, 2370.0], [83.2, 2371.0], [83.3, 2373.0], [83.4, 2374.0], [83.5, 2375.0], [83.6, 2377.0], [83.7, 2379.0], [83.8, 2380.0], [83.9, 2381.0], [84.0, 2382.0], [84.1, 2384.0], [84.2, 2385.0], [84.3, 2386.0], [84.4, 2388.0], [84.5, 2389.0], [84.6, 2390.0], [84.7, 2392.0], [84.8, 2394.0], [84.9, 2395.0], [85.0, 2397.0], [85.1, 2398.0], [85.2, 2400.0], [85.3, 2402.0], [85.4, 2403.0], [85.5, 2405.0], [85.6, 2407.0], [85.7, 2408.0], [85.8, 2410.0], [85.9, 2412.0], [86.0, 2414.0], [86.1, 2416.0], [86.2, 2418.0], [86.3, 2420.0], [86.4, 2422.0], [86.5, 2424.0], [86.6, 2426.0], [86.7, 2429.0], [86.8, 2432.0], [86.9, 2434.0], [87.0, 2437.0], [87.1, 2440.0], [87.2, 2442.0], [87.3, 2445.0], [87.4, 2448.0], [87.5, 2451.0], [87.6, 2454.0], [87.7, 2458.0], [87.8, 2461.0], [87.9, 2464.0], [88.0, 2467.0], [88.1, 2470.0], [88.2, 2473.0], [88.3, 2476.0], [88.4, 2478.0], [88.5, 2481.0], [88.6, 2484.0], [88.7, 2487.0], [88.8, 2489.0], [88.9, 2492.0], [89.0, 2494.0], [89.1, 2496.0], [89.2, 2499.0], [89.3, 2501.0], [89.4, 2504.0], [89.5, 2506.0], [89.6, 2508.0], [89.7, 2511.0], [89.8, 2513.0], [89.9, 2515.0], [90.0, 2518.0], [90.1, 2520.0], [90.2, 2522.0], [90.3, 2524.0], [90.4, 2527.0], [90.5, 2529.0], [90.6, 2531.0], [90.7, 2534.0], [90.8, 2537.0], [90.9, 2539.0], [91.0, 2542.0], [91.1, 2545.0], [91.2, 2547.0], [91.3, 2549.0], [91.4, 2552.0], [91.5, 2554.0], [91.6, 2557.0], [91.7, 2560.0], [91.8, 2562.0], [91.9, 2565.0], [92.0, 2569.0], [92.1, 2572.0], [92.2, 2575.0], [92.3, 2578.0], [92.4, 2581.0], [92.5, 2584.0], [92.6, 2587.0], [92.7, 2591.0], [92.8, 2594.0], [92.9, 2598.0], [93.0, 2601.0], [93.1, 2604.0], [93.2, 2608.0], [93.3, 2611.0], [93.4, 2615.0], [93.5, 2620.0], [93.6, 2624.0], [93.7, 2628.0], [93.8, 2631.0], [93.9, 2636.0], [94.0, 2641.0], [94.1, 2645.0], [94.2, 2649.0], [94.3, 2654.0], [94.4, 2660.0], [94.5, 2667.0], [94.6, 2675.0], [94.7, 2681.0], [94.8, 2687.0], [94.9, 2692.0], [95.0, 2700.0], [95.1, 2707.0], [95.2, 2715.0], [95.3, 2723.0], [95.4, 2730.0], [95.5, 2739.0], [95.6, 2748.0], [95.7, 2758.0], [95.8, 2767.0], [95.9, 2775.0], [96.0, 2785.0], [96.1, 2794.0], [96.2, 2806.0], [96.3, 2815.0], [96.4, 2823.0], [96.5, 2831.0], [96.6, 2841.0], [96.7, 2852.0], [96.8, 2864.0], [96.9, 2876.0], [97.0, 2885.0], [97.1, 2898.0], [97.2, 2910.0], [97.3, 2923.0], [97.4, 2935.0], [97.5, 2946.0], [97.6, 2963.0], [97.7, 2982.0], [97.8, 2996.0], [97.9, 3012.0], [98.0, 3034.0], [98.1, 3061.0], [98.2, 3087.0], [98.3, 3110.0], [98.4, 3144.0], [98.5, 3167.0], [98.6, 3193.0], [98.7, 3221.0], [98.8, 3274.0], [98.9, 3318.0], [99.0, 3347.0], [99.1, 3378.0], [99.2, 3428.0], [99.3, 3499.0], [99.4, 3551.0], [99.5, 3591.0], [99.6, 3641.0], [99.7, 3696.0], [99.8, 3762.0], [99.9, 3957.0], [100.0, 4184.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 180564.0, "series": [{"data": [[0.0, 1241.0], [600.0, 52.0], [700.0, 36.0], [800.0, 70.0], [900.0, 115.0], [1000.0, 95.0], [1100.0, 135.0], [1200.0, 113.0], [1300.0, 144.0], [1400.0, 146.0], [1500.0, 153.0], [1600.0, 338.0], [100.0, 4.0], [1700.0, 351.0], [1800.0, 899.0], [1900.0, 78180.0], [2000.0, 180564.0], [2100.0, 84281.0], [2200.0, 42070.0], [2300.0, 36666.0], [2400.0, 20300.0], [2500.0, 18636.0], [2600.0, 10231.0], [2700.0, 5740.0], [2800.0, 4833.0], [2900.0, 3593.0], [3000.0, 2121.0], [3100.0, 1880.0], [3200.0, 1119.0], [3300.0, 1462.0], [200.0, 35.0], [3400.0, 773.0], [3500.0, 1115.0], [3600.0, 895.0], [3700.0, 648.0], [3800.0, 240.0], [3900.0, 323.0], [4000.0, 233.0], [4100.0, 44.0], [300.0, 48.0], [400.0, 41.0], [500.0, 37.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 497684.0, "series": [{"data": [[0.0, 1369.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 943.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 497684.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 942.5264083439497, "minX": 1.5941805E12, "maxY": 1000.0, "series": [{"data": [[1.5941811E12, 1000.0], [1.5941814E12, 1000.0], [1.59418074E12, 1000.0], [1.59418104E12, 1000.0], [1.59418134E12, 1000.0], [1.59418068E12, 1000.0], [1.59418098E12, 1000.0], [1.59418128E12, 1000.0], [1.59418062E12, 1000.0], [1.59418092E12, 1000.0], [1.59418158E12, 942.5264083439497], [1.59418122E12, 1000.0], [1.59418056E12, 1000.0], [1.59418152E12, 1000.0], [1.59418086E12, 1000.0], [1.59418116E12, 1000.0], [1.59418146E12, 1000.0], [1.5941805E12, 1000.0], [1.5941808E12, 1000.0]], "isOverall": false, "label": "fabric\u5199\u6570\u636E\u6D4B\u8BD5", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59418158E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 14.0, "minX": 3.0, "maxY": 2413.500000000001, "series": [{"data": [[3.0, 2021.0], [9.0, 2004.125], [11.0, 203.5], [12.0, 208.0], [14.0, 197.0], [15.0, 221.0], [16.0, 197.0], [19.0, 211.25], [22.0, 234.0], [24.0, 245.5], [25.0, 243.0], [27.0, 244.5], [29.0, 235.5], [30.0, 268.0], [32.0, 260.5], [35.0, 267.0], [34.0, 270.0], [37.0, 262.3333333333333], [39.0, 267.0], [40.0, 277.0], [43.0, 291.0], [42.0, 284.5], [45.0, 291.0], [49.0, 287.75], [51.0, 323.5], [53.0, 300.0], [52.0, 300.0], [55.0, 321.0], [57.0, 311.5], [59.0, 310.5], [61.0, 328.0], [60.0, 329.0], [63.0, 328.0], [62.0, 328.0], [67.0, 358.0], [65.0, 354.0], [64.0, 329.0], [71.0, 368.5], [69.0, 333.5], [74.0, 353.0], [72.0, 347.0], [79.0, 346.75], [76.0, 360.0], [83.0, 382.0], [87.0, 372.5], [90.0, 400.0], [89.0, 373.0], [94.0, 394.3333333333333], [93.0, 383.0], [99.0, 391.0], [97.0, 388.6666666666667], [103.0, 423.0], [102.0, 434.0], [101.0, 413.0], [107.0, 423.0], [110.0, 433.0], [109.0, 419.2], [115.0, 448.5], [112.0, 449.5], [119.0, 446.75], [116.0, 460.0], [123.0, 476.5], [121.0, 476.0], [127.0, 483.0], [126.0, 469.0], [125.0, 482.0], [135.0, 503.5], [133.0, 498.5], [131.0, 492.5], [129.0, 467.5], [143.0, 526.0], [142.0, 517.0], [140.0, 529.0], [139.0, 506.0], [137.0, 503.0], [151.0, 553.5], [149.0, 527.0], [147.0, 529.0], [145.0, 526.0], [159.0, 560.0], [157.0, 568.0], [155.0, 563.0], [153.0, 561.5], [167.0, 595.0], [165.0, 587.0], [163.0, 578.5], [161.0, 571.0], [160.0, 572.0], [175.0, 601.0], [173.0, 610.0], [171.0, 601.5], [169.0, 582.0], [182.0, 619.5], [180.0, 625.0], [178.0, 604.0], [177.0, 610.5], [176.0, 621.0], [191.0, 642.5], [189.0, 635.0], [188.0, 626.4], [186.0, 625.0], [199.0, 665.0], [198.0, 649.0], [196.0, 663.0], [194.0, 650.0], [193.0, 650.0], [207.0, 667.6666666666666], [202.0, 664.0], [201.0, 654.0], [200.0, 665.0], [215.0, 699.0], [214.0, 699.0], [213.0, 699.0], [212.0, 688.0], [211.0, 689.0], [210.0, 688.0], [209.0, 677.0], [222.0, 706.0], [221.0, 727.0], [219.0, 727.0], [218.0, 727.0], [217.0, 687.5], [230.0, 737.0], [229.0, 754.0], [227.0, 715.3333333333334], [225.0, 726.0], [224.0, 706.0], [238.0, 747.0], [237.0, 740.0], [234.0, 737.0], [232.0, 737.0], [247.0, 757.0], [245.0, 770.0], [244.0, 757.0], [243.0, 757.0], [242.0, 757.0], [241.0, 756.0], [240.0, 758.0], [255.0, 798.0], [253.0, 807.5], [251.0, 807.5], [250.0, 786.0], [249.0, 779.5], [248.0, 773.0], [269.0, 843.5], [270.0, 857.0], [268.0, 843.0], [259.0, 830.0], [258.0, 831.0], [257.0, 812.0], [256.0, 812.0], [267.0, 853.0], [266.0, 844.0], [264.0, 854.0], [263.0, 836.0], [262.0, 838.0], [261.0, 818.0], [286.0, 882.0], [287.0, 925.0], [285.0, 917.0], [284.0, 927.5], [283.0, 886.3333333333334], [281.0, 886.6666666666666], [280.0, 868.0], [279.0, 883.5], [273.0, 856.0], [272.0, 857.0], [275.0, 856.0], [274.0, 856.0], [277.0, 869.0], [276.0, 877.0], [302.0, 915.5], [303.0, 921.5], [301.0, 913.0], [300.0, 899.0], [299.0, 869.0], [298.0, 912.5], [297.0, 905.6666666666667], [295.0, 907.0], [289.0, 873.0], [291.0, 873.0], [290.0, 881.0], [294.0, 910.5], [293.0, 907.0], [292.0, 890.5], [318.0, 924.0], [319.0, 939.3333333333334], [317.0, 978.0], [316.0, 927.5], [314.0, 955.5], [313.0, 950.5], [312.0, 933.0], [311.0, 934.0], [304.0, 921.5], [307.0, 935.0], [306.0, 911.0], [310.0, 933.0], [309.0, 933.0], [308.0, 939.6666666666666], [322.0, 962.0], [335.0, 998.0], [334.0, 967.5], [331.0, 960.5], [329.0, 969.6666666666666], [328.0, 963.1666666666667], [327.0, 942.0], [326.0, 929.3333333333334], [325.0, 955.2], [321.0, 939.0], [320.0, 950.25], [349.0, 1039.0], [350.0, 1012.0], [348.0, 1010.2], [339.0, 988.0], [338.0, 997.0], [337.0, 992.5], [347.0, 996.0], [346.0, 990.0], [345.0, 1006.0], [344.0, 1000.0], [343.0, 984.5], [342.0, 986.0], [340.0, 987.0], [365.0, 1043.5], [366.0, 1066.5], [364.0, 1039.0], [355.0, 1029.0], [354.0, 1022.0], [353.0, 1009.0], [352.0, 1015.3333333333334], [363.0, 1040.25], [362.0, 1040.0], [361.0, 1041.0], [360.0, 1029.3333333333333], [359.0, 1035.0], [358.0, 1029.5], [357.0, 1028.0], [356.0, 1021.0], [382.0, 1053.0], [383.0, 1071.0], [381.0, 1065.0], [380.0, 1077.0], [379.0, 1066.0], [378.0, 1066.0], [377.0, 1067.6666666666667], [376.0, 1067.3333333333333], [375.0, 1065.5], [370.0, 1053.2857142857142], [368.0, 1049.0], [374.0, 1066.0], [373.0, 1057.0], [372.0, 1048.0], [399.0, 1111.1666666666665], [395.0, 1103.0], [394.0, 1117.0], [392.0, 1085.0], [391.0, 1093.0], [389.0, 1085.6666666666667], [388.0, 1084.3333333333333], [385.0, 1080.0], [384.0, 1071.0], [414.0, 1149.25], [412.0, 1140.0], [411.0, 1135.3333333333333], [408.0, 1130.5], [407.0, 1131.0], [406.0, 1140.0], [405.0, 1127.0], [402.0, 1118.75], [400.0, 1123.0], [430.0, 1179.0], [431.0, 1173.0], [429.0, 1164.5], [428.0, 1155.0], [427.0, 1162.0], [426.0, 1144.5], [424.0, 1170.0], [423.0, 1155.5], [417.0, 1152.5], [416.0, 1147.25], [419.0, 1169.0], [418.0, 1152.3333333333333], [422.0, 1150.0], [421.0, 1153.6], [445.0, 1198.0], [446.0, 1198.0], [444.0, 1199.0], [435.0, 1172.0], [434.0, 1160.0], [433.0, 1173.0], [432.0, 1172.0], [443.0, 1207.0], [442.0, 1174.0], [441.0, 1174.5], [440.0, 1172.0], [438.0, 1187.0], [437.0, 1171.0], [436.0, 1171.0], [450.0, 1192.0], [461.0, 1228.0], [460.0, 1219.5], [459.0, 1211.0], [457.0, 1194.3333333333333], [456.0, 1218.5], [454.0, 1206.0], [453.0, 1195.3333333333333], [452.0, 1186.6666666666667], [449.0, 1189.0], [448.0, 1183.75], [477.0, 1244.5], [478.0, 1256.75], [476.0, 1257.0], [467.0, 1231.5], [466.0, 1233.0], [465.0, 1211.75], [464.0, 1214.75], [475.0, 1236.0], [474.0, 1247.125], [472.0, 1229.5], [471.0, 1219.0], [470.0, 1219.5], [469.0, 1220.5], [468.0, 1231.0], [493.0, 1273.2], [494.0, 1277.25], [492.0, 1265.0], [489.0, 1259.0], [488.0, 1261.0], [487.0, 1257.0], [484.0, 1253.5], [483.0, 1240.0], [482.0, 1268.4285714285713], [509.0, 1337.0], [510.0, 1311.6666666666667], [508.0, 1319.0], [498.0, 1328.0], [497.0, 1287.0], [496.0, 1274.0], [507.0, 1307.2857142857144], [506.0, 1298.5], [505.0, 1299.0], [503.0, 1299.0], [501.0, 1285.5], [500.0, 1286.0], [541.0, 1367.0], [542.0, 1383.6666666666667], [529.0, 1358.5], [533.0, 1216.5555555555557], [531.0, 1375.0], [540.0, 1367.0], [539.0, 1374.2], [538.0, 1371.25], [537.0, 1382.5], [536.0, 1383.5], [519.0, 1341.0], [517.0, 1323.5], [516.0, 1331.1666666666667], [514.0, 1322.75], [527.0, 1373.0], [526.0, 1353.375], [523.0, 1344.4], [521.0, 1355.0], [520.0, 1354.0], [535.0, 1380.0], [534.0, 1357.0], [574.0, 1450.8333333333333], [563.0, 1425.0], [575.0, 1449.0], [560.0, 1426.0], [562.0, 1426.0], [561.0, 1442.0], [571.0, 1468.0], [570.0, 1451.6666666666667], [569.0, 1442.25], [551.0, 1426.0], [550.0, 1426.0], [549.0, 1375.8], [546.0, 1371.0], [545.0, 1398.0], [544.0, 1398.0], [559.0, 1444.0], [558.0, 1431.0], [557.0, 1412.3333333333333], [556.0, 1432.0], [554.0, 1426.0], [553.0, 1425.5], [567.0, 1451.5], [566.0, 1444.5], [565.0, 1454.0], [604.0, 1473.5], [596.0, 1479.25], [607.0, 1492.3333333333333], [592.0, 1478.4], [594.0, 1475.3333333333333], [593.0, 1475.0], [603.0, 1477.8749999999998], [602.0, 1468.6666666666667], [601.0, 1466.0], [582.0, 1461.0], [581.0, 1456.875], [578.0, 1454.3333333333333], [577.0, 1450.0], [591.0, 1482.5714285714287], [590.0, 1467.6666666666667], [589.0, 1471.0], [587.0, 1451.6666666666667], [585.0, 1460.0], [584.0, 1451.5], [599.0, 1476.0], [598.0, 1455.0], [597.0, 14.0], [633.0, 1552.6], [638.0, 1563.0], [639.0, 1178.5], [625.0, 1550.5], [624.0, 1550.0], [637.0, 1573.5], [635.0, 1565.4166666666667], [634.0, 1553.3333333333333], [623.0, 1536.5714285714287], [608.0, 1493.3333333333333], [610.0, 1491.0], [609.0, 1485.2], [612.0, 1501.5], [611.0, 1490.0], [615.0, 1502.6666666666667], [614.0, 1503.8], [621.0, 1553.0], [619.0, 1537.0], [618.0, 1523.0], [616.0, 1509.375], [631.0, 1557.3333333333333], [630.0, 1554.25], [628.0, 1557.0], [627.0, 1552.1666666666665], [664.0, 1623.0769230769229], [668.0, 1599.0], [671.0, 1608.75], [658.0, 1598.75], [656.0, 1603.6], [660.0, 1598.0], [659.0, 1603.0], [670.0, 1598.0], [669.0, 1596.0], [667.0, 1611.0], [666.0, 1623.7142857142858], [665.0, 1626.0], [655.0, 1606.0], [640.0, 1580.0], [643.0, 1578.0], [641.0, 1578.0], [645.0, 1592.25], [644.0, 1579.5], [647.0, 1566.0], [646.0, 1585.0], [654.0, 1606.0], [653.0, 1586.0], [652.0, 1586.25], [651.0, 1586.75], [650.0, 1584.75], [649.0, 1586.0], [648.0, 1602.0], [663.0, 1591.0], [662.0, 1622.1666666666667], [697.0, 1629.5], [702.0, 1628.6666666666667], [703.0, 1636.5], [690.0, 1669.0], [689.0, 1635.2857142857142], [692.0, 1640.3333333333333], [691.0, 1653.0], [701.0, 1635.0], [700.0, 1637.75], [698.0, 1633.0], [696.0, 1633.1666666666667], [679.0, 1626.3333333333335], [678.0, 1623.4444444444443], [677.0, 1614.6666666666667], [676.0, 1615.0], [674.0, 1594.5], [673.0, 1619.6666666666667], [672.0, 1599.0], [687.0, 1643.3333333333333], [686.0, 1627.3333333333333], [685.0, 1625.25], [684.0, 1614.5000000000002], [683.0, 1617.0], [682.0, 1620.8], [681.0, 1639.1666666666667], [680.0, 1627.0], [695.0, 1630.0], [694.0, 1617.25], [728.0, 1654.4], [732.0, 1668.7142857142856], [733.0, 1670.0], [721.0, 1639.8333333333333], [723.0, 1656.5], [722.0, 1654.3], [731.0, 1692.8], [730.0, 1662.0], [729.0, 1674.0], [719.0, 1645.3333333333335], [704.0, 1626.2], [706.0, 1649.0], [705.0, 1650.0], [709.0, 1625.25], [707.0, 1613.0], [711.0, 1640.3333333333335], [710.0, 1655.0], [718.0, 1644.75], [716.0, 1647.5], [715.0, 1636.3333333333333], [714.0, 1632.0], [713.0, 1644.3000000000002], [727.0, 1675.4], [726.0, 1672.0], [725.0, 1652.5], [724.0, 1656.75], [760.0, 1706.4], [765.0, 1717.5], [766.0, 1717.5], [752.0, 1691.0], [755.0, 1683.0], [754.0, 1698.0], [764.0, 1719.5], [763.0, 1716.625], [761.0, 1580.7692307692307], [751.0, 1697.0], [736.0, 1683.8333333333335], [738.0, 1675.5], [737.0, 1667.0], [741.0, 1679.1666666666665], [739.0, 1687.5], [743.0, 1679.7692307692307], [742.0, 1687.5714285714287], [750.0, 1706.0], [749.0, 1704.5], [748.0, 1705.625], [745.0, 1690.5], [759.0, 1707.0], [758.0, 1687.0], [757.0, 1696.4], [756.0, 1696.3333333333335], [793.0, 1734.375], [798.0, 1749.5384615384617], [799.0, 1751.75], [784.0, 1732.0], [787.0, 1744.6], [785.0, 1735.5], [797.0, 1750.0], [796.0, 1749.7777777777778], [794.0, 1740.0], [783.0, 1734.6666666666667], [768.0, 1739.5], [771.0, 1731.3333333333333], [769.0, 1728.0], [774.0, 1738.0], [773.0, 1720.4], [782.0, 1740.111111111111], [781.0, 1742.25], [780.0, 1733.0], [778.0, 1733.2499999999998], [777.0, 1715.5714285714287], [776.0, 1709.25], [791.0, 1743.5], [790.0, 1735.3333333333335], [789.0, 1736.3333333333333], [788.0, 1740.0], [828.0, 1772.5], [831.0, 1773.0], [816.0, 1761.5], [818.0, 1771.0], [817.0, 1752.0], [821.0, 1771.0], [819.0, 1770.5], [830.0, 1785.0], [829.0, 1772.4], [827.0, 1765.5], [826.0, 1765.5], [825.0, 1778.75], [824.0, 1789.0], [814.0, 1758.0], [800.0, 1762.3333333333333], [803.0, 1766.4], [802.0, 1764.6], [805.0, 1770.0], [804.0, 1769.2], [807.0, 1778.0], [806.0, 1778.0], [813.0, 1765.5], [812.0, 1759.0], [811.0, 1753.7142857142858], [810.0, 1739.0], [809.0, 1764.2727272727273], [808.0, 1757.0], [823.0, 1783.0], [822.0, 1765.8], [858.0, 1833.0], [862.0, 1852.8333333333335], [863.0, 1848.875], [849.0, 1811.0500000000002], [853.0, 1828.142857142857], [850.0, 1812.75], [861.0, 1836.3333333333333], [860.0, 1837.6666666666667], [859.0, 1843.8181818181818], [856.0, 1837.75], [839.0, 1783.6], [838.0, 1788.0], [837.0, 1782.0], [835.0, 1785.5], [834.0, 1785.0], [833.0, 1776.4444444444443], [832.0, 1777.8571428571427], [847.0, 1815.0], [846.0, 1814.7777777777776], [845.0, 1801.5], [844.0, 1793.0], [842.0, 1797.4285714285713], [841.0, 1790.0], [840.0, 1784.0], [855.0, 1838.9285714285716], [854.0, 1834.2222222222222], [892.0, 1940.6], [895.0, 1937.3333333333333], [881.0, 1905.25], [880.0, 1909.6], [883.0, 1881.0], [882.0, 1897.7777777777778], [885.0, 1916.7586206896551], [884.0, 1909.5], [894.0, 1893.9999999999998], [893.0, 1953.0], [891.0, 1950.0], [890.0, 1939.1], [889.0, 1922.5], [888.0, 1926.8], [879.0, 1902.4545454545455], [865.0, 1864.3333333333335], [864.0, 1849.6666666666667], [868.0, 1863.0], [867.0, 1859.8235294117644], [871.0, 1856.5555555555557], [869.0, 1854.625], [878.0, 1899.0], [877.0, 1879.2857142857142], [876.0, 1862.7333333333333], [875.0, 1859.6666666666667], [874.0, 1865.2352941176468], [873.0, 1865.8181818181818], [872.0, 1857.0], [887.0, 1912.0], [886.0, 1902.5], [920.0, 2006.6], [924.0, 1986.9], [927.0, 1987.2380952380954], [913.0, 1957.4], [912.0, 1976.3333333333333], [915.0, 1960.833333333333], [914.0, 1958.5], [926.0, 1888.5000000000002], [925.0, 2004.0], [923.0, 1974.5], [922.0, 1920.7058823529412], [921.0, 2016.5714285714287], [911.0, 1959.0], [897.0, 1928.0], [896.0, 1947.3333333333333], [899.0, 1965.888888888889], [898.0, 1956.6315789473683], [901.0, 1960.1000000000001], [900.0, 1968.8235294117646], [903.0, 1871.6190476190477], [902.0, 1955.8333333333333], [910.0, 1955.7142857142858], [909.0, 1959.625], [908.0, 1963.0000000000002], [907.0, 1960.875], [906.0, 1962.5], [905.0, 1958.6842105263156], [904.0, 1965.5], [918.0, 2022.8490566037733], [916.0, 1882.608695652174], [953.0, 1959.3157894736846], [958.0, 1937.369565217392], [959.0, 1956.9166666666665], [945.0, 2021.1818181818182], [944.0, 2011.1176470588236], [947.0, 2014.3333333333333], [946.0, 1935.1724137931035], [949.0, 1682.3333333333333], [948.0, 2021.8], [957.0, 1954.8333333333333], [956.0, 1967.0], [955.0, 1956.4545454545455], [952.0, 1996.2407407407402], [935.0, 1972.5], [934.0, 1989.05], [933.0, 1986.9999999999998], [932.0, 1990.6666666666667], [931.0, 1972.3809523809525], [930.0, 1949.0], [929.0, 1964.1250000000002], [943.0, 2011.5], [942.0, 2002.5454545454545], [941.0, 1995.6666666666667], [940.0, 2002.0], [939.0, 1996.7272727272727], [938.0, 1984.7777777777778], [937.0, 1975.6000000000001], [936.0, 1969.6666666666667], [951.0, 2012.5], [950.0, 2020.7142857142858], [984.0, 2003.0422535211273], [988.0, 2047.6190476190477], [991.0, 2067.7625000000003], [976.0, 1963.5], [978.0, 1954.1375], [977.0, 1979.0], [990.0, 2053.333333333333], [989.0, 2064.586206896551], [987.0, 2017.5647058823529], [986.0, 2020.8], [985.0, 2017.6857142857145], [975.0, 1983.5161290322578], [961.0, 1947.1538461538462], [960.0, 1951.173333333333], [963.0, 1948.5833333333335], [962.0, 1953.3636363636363], [965.0, 1940.1568627450984], [964.0, 1941.181818181818], [967.0, 1947.6428571428573], [966.0, 1949.4], [974.0, 1809.1818181818182], [973.0, 1993.703703703704], [972.0, 1992.3428571428576], [971.0, 1972.0454545454547], [970.0, 1898.388888888889], [969.0, 1848.4102564102566], [968.0, 1949.75], [983.0, 1989.35], [982.0, 1962.2399999999998], [1000.0, 2182.4995400276707], [999.0, 2055.579831932774], [998.0, 2329.866043613707], [997.0, 2395.4700000000007], [996.0, 2398.378238341968], [995.0, 2413.500000000001], [994.0, 2377.232876712329], [993.0, 2375.564705882355], [992.0, 2119.0042016806715]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}, {"data": [[998.1043939999973, 2178.7774219999505]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 66238.85, "minX": 1.5941805E12, "maxY": 460995.75, "series": [{"data": [[1.5941811E12, 385630.0], [1.5941814E12, 436241.2833333333], [1.59418074E12, 449486.5333333333], [1.59418104E12, 402318.5], [1.59418134E12, 443520.23333333334], [1.59418068E12, 453918.48333333334], [1.59418098E12, 413145.3], [1.59418128E12, 413139.5333333333], [1.59418062E12, 460995.75], [1.59418092E12, 437127.61666666664], [1.59418158E12, 256489.71666666667], [1.59418122E12, 387034.63333333336], [1.59418056E12, 455340.43333333335], [1.59418152E12, 438162.6], [1.59418086E12, 442929.76666666666], [1.59418116E12, 368835.8], [1.59418146E12, 428654.2166666667], [1.5941805E12, 266636.51666666666], [1.5941808E12, 436220.35]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5941811E12, 99601.28333333334], [1.5941814E12, 112663.48333333334], [1.59418074E12, 116097.73333333334], [1.59418104E12, 103911.16666666667], [1.59418134E12, 114547.3], [1.59418068E12, 117246.5], [1.59418098E12, 106706.76666666666], [1.59418128E12, 106698.73333333334], [1.59418062E12, 119074.08333333333], [1.59418092E12, 112904.48333333334], [1.59418158E12, 66238.85], [1.59418122E12, 99958.76666666666], [1.59418056E12, 117616.03333333334], [1.59418152E12, 113157.53333333334], [1.59418086E12, 114402.7], [1.59418116E12, 95259.26666666666], [1.59418146E12, 110703.35], [1.5941805E12, 68873.78333333334], [1.5941808E12, 112671.51666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59418158E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2024.5125990892184, "minX": 1.5941805E12, "maxY": 2529.33690335638, "series": [{"data": [[1.5941811E12, 2421.6083800459587], [1.5941814E12, 2140.071125530321], [1.59418074E12, 2075.9263077774476], [1.59418104E12, 2320.9685349826013], [1.59418134E12, 2104.3774808892617], [1.59418068E12, 2055.45501884207], [1.59418098E12, 2251.813069336716], [1.59418128E12, 2261.280868845076], [1.59418062E12, 2024.5125990892184], [1.59418092E12, 2141.1086840513613], [1.59418158E12, 2046.0066703050152], [1.59418122E12, 2408.907216909091], [1.59418056E12, 2047.9674202581798], [1.59418152E12, 2144.9823583700017], [1.59418086E12, 2102.8825574046673], [1.59418116E12, 2529.33690335638], [1.59418146E12, 2160.115489278318], [1.5941805E12, 2083.526622732815], [1.5941808E12, 2136.7291005668217]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59418158E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2024.510440209139, "minX": 1.5941805E12, "maxY": 2529.33462641256, "series": [{"data": [[1.5941811E12, 2421.606283018109], [1.5941814E12, 2140.068843809043], [1.59418074E12, 2075.9240589537803], [1.59418104E12, 2320.966061074618], [1.59418134E12, 2104.3756574794797], [1.59418068E12, 2055.452826310387], [1.59418098E12, 2251.810735526607], [1.59418128E12, 2261.2786101490738], [1.59418062E12, 2024.510440209139], [1.59418092E12, 2141.1066918068864], [1.59418158E12, 2046.0047298526335], [1.59418122E12, 2408.9044844491045], [1.59418056E12, 2047.964927259065], [1.59418152E12, 2144.9800156183323], [1.59418086E12, 2102.8805912506245], [1.59418116E12, 2529.33462641256], [1.59418146E12, 2160.11276804182], [1.5941805E12, 2083.5219571936814], [1.5941808E12, 2136.727104203061]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59418158E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.5941805E12, "maxY": 20.28640578526862, "series": [{"data": [[1.5941811E12, 0.02714037988466343], [1.5941814E12, 0.017112909551142735], [1.59418074E12, 0.02010102407971197], [1.59418104E12, 0.02010050251256283], [1.59418134E12, 0.01613016340556851], [1.59418068E12, 0.01980130181569034], [1.59418098E12, 0.01844462847248368], [1.59418128E12, 0.019688299954826072], [1.59418062E12, 0.018822735705852568], [1.59418092E12, 0.01832153402824704], [1.59418158E12, 0.0], [1.59418122E12, 0.0209756489592542], [1.59418056E12, 0.02069530769756156], [1.59418152E12, 0.019700411756353745], [1.59418086E12, 0.01723895793834713], [1.59418116E12, 0.022179119581716894], [1.59418146E12, 0.01864954101810525], [1.5941805E12, 20.28640578526862], [1.5941808E12, 0.018466364835478154]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59418158E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.5941805E12, "maxY": 4184.0, "series": [{"data": [[1.5941811E12, 3775.0], [1.5941814E12, 2900.0], [1.59418074E12, 3025.0], [1.59418104E12, 3095.0], [1.59418134E12, 2722.0], [1.59418068E12, 2550.0], [1.59418098E12, 3208.0], [1.59418128E12, 3814.0], [1.59418062E12, 2313.0], [1.59418092E12, 2721.0], [1.59418158E12, 2611.0], [1.59418122E12, 4184.0], [1.59418056E12, 3165.0], [1.59418152E12, 2922.0], [1.59418086E12, 2670.0], [1.59418116E12, 3828.0], [1.59418146E12, 3088.0], [1.5941805E12, 4091.0], [1.5941808E12, 3294.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5941811E12, 1997.0], [1.5941814E12, 1978.0], [1.59418074E12, 1949.0], [1.59418104E12, 1982.0], [1.59418134E12, 1922.0], [1.59418068E12, 1941.0], [1.59418098E12, 1921.00899523139], [1.59418128E12, 1912.00899523139], [1.59418062E12, 1921.0], [1.59418092E12, 1952.0], [1.59418158E12, 360.0], [1.59418122E12, 2025.0], [1.59418056E12, 1916.0], [1.59418152E12, 1952.0], [1.59418086E12, 1936.00899523139], [1.59418116E12, 2043.0], [1.59418146E12, 1946.0], [1.5941805E12, 1472.3039100551605], [1.5941808E12, 1919.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5941811E12, 1998.0], [1.5941814E12, 1979.0], [1.59418074E12, 1950.0], [1.59418104E12, 1983.0], [1.59418134E12, 1923.0], [1.59418068E12, 1943.0], [1.59418098E12, 1923.0], [1.59418128E12, 1914.0], [1.59418062E12, 1922.0], [1.59418092E12, 1953.009901907444], [1.59418158E12, 383.0], [1.59418122E12, 2026.0], [1.59418056E12, 1917.0], [1.59418152E12, 1954.0], [1.59418086E12, 1937.009901907444], [1.59418116E12, 2044.0], [1.59418146E12, 1948.0], [1.5941805E12, 1608.8260081768035], [1.5941808E12, 1920.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5941811E12, 1998.0], [1.5941814E12, 1978.0], [1.59418074E12, 1949.0], [1.59418104E12, 1982.0], [1.59418134E12, 1923.0], [1.59418068E12, 1942.0], [1.59418098E12, 1922.0], [1.59418128E12, 1913.0], [1.59418062E12, 1921.0], [1.59418092E12, 1953.0], [1.59418158E12, 381.0], [1.59418122E12, 2025.0], [1.59418056E12, 1916.0], [1.59418152E12, 1953.0], [1.59418086E12, 1937.0], [1.59418116E12, 2044.0], [1.59418146E12, 1947.0], [1.5941805E12, 1563.8119959115982], [1.5941808E12, 1920.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.5941811E12, 6.0], [1.5941814E12, 5.0], [1.59418074E12, 5.0], [1.59418104E12, 6.0], [1.59418134E12, 4.0], [1.59418068E12, 5.0], [1.59418098E12, 3.0], [1.59418128E12, 4.0], [1.59418062E12, 6.0], [1.59418092E12, 4.0], [1.59418158E12, 4.0], [1.59418122E12, 5.0], [1.59418056E12, 10.0], [1.59418152E12, 5.0], [1.59418086E12, 5.0], [1.59418116E12, 6.0], [1.59418146E12, 5.0], [1.5941805E12, 13.0], [1.5941808E12, 6.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5941811E12, 2314.0], [1.5941814E12, 2088.0], [1.59418074E12, 2037.0], [1.59418104E12, 2298.0], [1.59418134E12, 2087.0], [1.59418068E12, 2032.0], [1.59418098E12, 2236.0], [1.59418128E12, 2093.0], [1.59418062E12, 2006.0], [1.59418092E12, 2071.0], [1.59418158E12, 2083.0], [1.59418122E12, 2297.0], [1.59418056E12, 2022.0], [1.59418152E12, 2082.0], [1.59418086E12, 2030.0], [1.59418116E12, 2423.0], [1.59418146E12, 2143.0], [1.5941805E12, 2030.0], [1.5941808E12, 2041.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59418158E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 917.0, "minX": 9.0, "maxY": 3719.0, "series": [{"data": [[9.0, 2020.0], [20.0, 917.0], [140.0, 1346.5], [181.0, 3322.0], [190.0, 3570.5], [201.0, 2891.0], [200.0, 2819.5], [211.0, 3038.0], [210.0, 2317.5], [221.0, 2589.5], [230.0, 2102.0], [232.0, 3554.5], [240.0, 2697.5], [250.0, 3188.0], [271.0, 2709.0], [261.0, 3189.0], [260.0, 3115.0], [263.0, 3638.0], [280.0, 2539.5], [282.0, 3596.0], [272.0, 3327.0], [284.0, 2148.0], [278.0, 2185.0], [277.0, 2468.0], [285.0, 2946.0], [286.0, 2838.0], [299.0, 2190.0], [300.0, 2614.0], [301.0, 2439.5], [290.0, 2471.0], [292.0, 3719.0], [302.0, 2685.0], [311.0, 2667.0], [318.0, 3010.0], [330.0, 2559.0], [320.0, 2353.5], [332.0, 2871.5], [331.0, 2475.0], [335.0, 2311.0], [321.0, 3508.0], [323.0, 2824.0], [340.0, 2396.5], [341.0, 2416.0], [351.0, 2387.5], [350.0, 2367.0], [342.0, 2379.0], [347.0, 2378.0], [360.0, 2331.0], [352.0, 2382.0], [358.0, 2336.0], [362.0, 2650.0], [361.0, 2301.0], [364.0, 2460.5], [363.0, 2284.0], [357.0, 2112.0], [381.0, 2449.0], [380.0, 2388.0], [371.0, 2370.0], [370.0, 2412.5], [369.0, 2137.0], [372.0, 2271.0], [373.0, 2206.0], [383.0, 2354.0], [378.0, 2682.0], [376.0, 3203.5], [382.0, 2318.0], [379.0, 2404.0], [384.0, 2132.0], [389.0, 2302.0], [391.0, 2418.0], [390.0, 2340.5], [399.0, 2674.0], [397.0, 2514.0], [385.0, 2125.0], [386.0, 2122.0], [392.0, 2606.0], [393.0, 2525.0], [413.0, 2151.0], [400.0, 2269.0], [410.0, 2206.0], [411.0, 2328.0], [402.0, 2523.0], [408.0, 2335.0], [401.0, 2520.0], [403.0, 2309.0], [412.0, 2294.0], [415.0, 2132.0], [414.0, 2535.0], [418.0, 2355.0], [421.0, 2327.0], [430.0, 2243.5], [420.0, 2109.0], [431.0, 2263.0], [429.0, 2282.0], [425.0, 2524.0], [426.0, 2367.0], [427.0, 2147.0], [417.0, 2070.0], [422.0, 2415.0], [423.0, 2281.0], [446.0, 2045.0], [440.0, 2334.0], [447.0, 2914.0], [441.0, 2174.0], [442.0, 2235.0], [439.0, 2237.0], [438.0, 2230.0], [444.0, 2170.5], [435.0, 2074.0], [445.0, 2172.0], [432.0, 2389.0], [443.0, 2391.0], [434.0, 2758.0], [433.0, 2320.0], [450.0, 2161.0], [449.0, 2168.5], [451.0, 2158.0], [460.0, 2263.0], [461.0, 2155.0], [462.0, 2163.0], [463.0, 2097.0], [459.0, 2012.0], [457.0, 2052.0], [456.0, 2063.0], [454.0, 2125.0], [455.0, 2028.0], [452.0, 2193.0], [453.0, 2193.0], [448.0, 2200.0], [465.0, 2167.5], [470.0, 2106.0], [473.0, 2096.0], [471.0, 2100.0], [474.0, 2174.0], [464.0, 2171.0], [475.0, 2044.5], [472.0, 2204.0], [478.0, 2098.5], [476.0, 2076.0], [468.0, 2347.0], [480.0, 2056.0], [485.0, 2120.0], [490.0, 2030.0], [492.0, 2094.0], [483.0, 2141.0], [493.0, 2065.0], [482.0, 2071.0], [481.0, 2090.0], [494.0, 2046.0], [491.0, 2070.0], [489.0, 2291.0], [495.0, 2111.0], [488.0, 2024.0], [486.0, 2059.0], [487.0, 2024.0], [484.0, 2029.0], [497.0, 2063.0], [510.0, 2011.0], [500.0, 2031.0], [505.0, 2020.0], [506.0, 2050.0], [507.0, 2004.0], [511.0, 2029.0], [504.0, 2067.0], [501.0, 2015.0], [503.0, 2040.0], [502.0, 2043.0], [496.0, 2038.0], [498.0, 1993.0], [499.0, 2064.0], [509.0, 2000.0], [508.0, 2115.0], [515.0, 1980.0], [525.0, 1940.5], [520.0, 2002.0], [521.0, 2024.0], [522.0, 2294.0], [523.0, 2040.0], [524.0, 1947.0], [527.0, 1981.0], [530.0, 1976.0], [531.0, 1966.0], [535.0, 1956.0], [529.0, 1983.0], [518.0, 2021.0], [519.0, 1994.0], [541.0, 1881.0], [517.0, 2080.0], [512.0, 2023.0], [514.0, 2026.0], [513.0, 2068.0], [549.0, 2025.0], [582.0, 1618.0], [821.0, 998.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[520.0, 2022.0], [341.0, 2329.0], [481.0, 2294.0], [499.0, 2041.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 821.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 917.0, "minX": 9.0, "maxY": 3719.0, "series": [{"data": [[9.0, 2020.0], [20.0, 917.0], [140.0, 1346.5], [181.0, 3322.0], [190.0, 3570.5], [201.0, 2891.0], [200.0, 2819.5], [211.0, 3038.0], [210.0, 2317.5], [221.0, 2589.5], [230.0, 2102.0], [232.0, 3554.5], [240.0, 2697.5], [250.0, 3188.0], [271.0, 2709.0], [261.0, 3189.0], [260.0, 3115.0], [263.0, 3638.0], [280.0, 2539.5], [282.0, 3596.0], [272.0, 3327.0], [284.0, 2148.0], [278.0, 2185.0], [277.0, 2468.0], [285.0, 2946.0], [286.0, 2838.0], [299.0, 2190.0], [300.0, 2614.0], [301.0, 2439.5], [290.0, 2471.0], [292.0, 3719.0], [302.0, 2685.0], [311.0, 2667.0], [318.0, 3010.0], [330.0, 2559.0], [320.0, 2353.5], [332.0, 2871.5], [331.0, 2475.0], [335.0, 2311.0], [321.0, 3508.0], [323.0, 2824.0], [340.0, 2396.5], [341.0, 2416.0], [351.0, 2387.5], [350.0, 2367.0], [342.0, 2379.0], [347.0, 2378.0], [360.0, 2331.0], [352.0, 2382.0], [358.0, 2336.0], [362.0, 2650.0], [361.0, 2301.0], [364.0, 2460.5], [363.0, 2284.0], [357.0, 2112.0], [381.0, 2449.0], [380.0, 2388.0], [371.0, 2370.0], [370.0, 2412.5], [369.0, 2137.0], [372.0, 2271.0], [373.0, 2206.0], [383.0, 2354.0], [378.0, 2682.0], [376.0, 3203.5], [382.0, 2318.0], [379.0, 2404.0], [384.0, 2132.0], [389.0, 2302.0], [391.0, 2418.0], [390.0, 2340.5], [399.0, 2674.0], [397.0, 2514.0], [385.0, 2125.0], [386.0, 2122.0], [392.0, 2606.0], [393.0, 2525.0], [413.0, 2151.0], [400.0, 2269.0], [410.0, 2206.0], [411.0, 2328.0], [402.0, 2523.0], [408.0, 2335.0], [401.0, 2520.0], [403.0, 2309.0], [412.0, 2294.0], [415.0, 2132.0], [414.0, 2535.0], [418.0, 2355.0], [421.0, 2327.0], [430.0, 2243.5], [420.0, 2109.0], [431.0, 2263.0], [429.0, 2282.0], [425.0, 2524.0], [426.0, 2367.0], [427.0, 2147.0], [417.0, 2070.0], [422.0, 2415.0], [423.0, 2281.0], [446.0, 2045.0], [440.0, 2334.0], [447.0, 2914.0], [441.0, 2174.0], [442.0, 2235.0], [439.0, 2237.0], [438.0, 2230.0], [444.0, 2170.5], [435.0, 2074.0], [445.0, 2172.0], [432.0, 2389.0], [443.0, 2391.0], [434.0, 2758.0], [433.0, 2320.0], [450.0, 2161.0], [449.0, 2168.5], [451.0, 2158.0], [460.0, 2263.0], [461.0, 2155.0], [462.0, 2163.0], [463.0, 2097.0], [459.0, 2012.0], [457.0, 2052.0], [456.0, 2063.0], [454.0, 2125.0], [455.0, 2028.0], [452.0, 2193.0], [453.0, 2193.0], [448.0, 2200.0], [465.0, 2167.5], [470.0, 2106.0], [473.0, 2096.0], [471.0, 2100.0], [474.0, 2174.0], [464.0, 2171.0], [475.0, 2044.5], [472.0, 2204.0], [478.0, 2098.5], [476.0, 2076.0], [468.0, 2347.0], [480.0, 2056.0], [485.0, 2120.0], [490.0, 2030.0], [492.0, 2094.0], [483.0, 2141.0], [493.0, 2065.0], [482.0, 2071.0], [481.0, 2090.0], [494.0, 2046.0], [491.0, 2070.0], [489.0, 2291.0], [495.0, 2110.5], [488.0, 2024.0], [486.0, 2059.0], [487.0, 2024.0], [484.0, 2029.0], [497.0, 2063.0], [510.0, 2011.0], [500.0, 2031.0], [505.0, 2020.0], [506.0, 2050.0], [507.0, 2004.0], [511.0, 2029.0], [504.0, 2067.0], [501.0, 2015.0], [503.0, 2040.0], [502.0, 2043.0], [496.0, 2038.0], [498.0, 1993.0], [499.0, 2064.0], [509.0, 2000.0], [508.0, 2115.0], [515.0, 1980.0], [525.0, 1940.0], [520.0, 2002.0], [521.0, 2024.0], [522.0, 2294.0], [523.0, 2040.0], [524.0, 1947.0], [527.0, 1981.0], [530.0, 1976.0], [531.0, 1966.0], [535.0, 1956.0], [529.0, 1983.0], [518.0, 2021.0], [519.0, 1994.0], [541.0, 1881.0], [517.0, 2080.0], [512.0, 2023.0], [514.0, 2026.0], [513.0, 2068.0], [549.0, 2025.0], [582.0, 1618.0], [821.0, 998.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[520.0, 2022.0], [341.0, 2329.0], [481.0, 2294.0], [499.0, 2041.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 821.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 258.18333333333334, "minX": 1.5941805E12, "maxY": 494.0833333333333, "series": [{"data": [[1.5941811E12, 413.26666666666665], [1.5941814E12, 467.48333333333335], [1.59418074E12, 481.73333333333335], [1.59418104E12, 431.1666666666667], [1.59418134E12, 475.3], [1.59418068E12, 486.5], [1.59418098E12, 442.76666666666665], [1.59418128E12, 442.73333333333335], [1.59418062E12, 494.0833333333333], [1.59418092E12, 468.48333333333335], [1.59418158E12, 258.18333333333334], [1.59418122E12, 414.76666666666665], [1.59418056E12, 488.05], [1.59418152E12, 469.53333333333336], [1.59418086E12, 474.68333333333334], [1.59418116E12, 395.28333333333336], [1.59418146E12, 459.35], [1.5941805E12, 302.43333333333334], [1.5941808E12, 467.53333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59418158E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 274.85, "minX": 1.5941805E12, "maxY": 494.0833333333333, "series": [{"data": [[1.5941811E12, 413.28333333333336], [1.5941814E12, 467.48333333333335], [1.59418074E12, 481.73333333333335], [1.59418104E12, 431.1666666666667], [1.59418134E12, 475.3], [1.59418068E12, 486.5], [1.59418098E12, 442.76666666666665], [1.59418128E12, 442.73333333333335], [1.59418062E12, 494.0833333333333], [1.59418092E12, 468.48333333333335], [1.59418158E12, 274.85], [1.59418122E12, 414.76666666666665], [1.59418056E12, 488.03333333333336], [1.59418152E12, 469.53333333333336], [1.59418086E12, 474.7], [1.59418116E12, 395.26666666666665], [1.59418146E12, 459.35], [1.5941805E12, 285.78333333333336], [1.5941808E12, 467.51666666666665]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59418158E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.5941805E12, "maxY": 494.0833333333333, "series": [{"data": [[1.5941811E12, 0.016666666666666666], [1.59418068E12, 0.016666666666666666], [1.5941808E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-failure", "isController": false}, {"data": [[1.5941811E12, 413.26666666666665], [1.5941814E12, 467.48333333333335], [1.59418074E12, 481.73333333333335], [1.59418104E12, 431.1666666666667], [1.59418134E12, 475.3], [1.59418068E12, 486.48333333333335], [1.59418098E12, 442.76666666666665], [1.59418128E12, 442.73333333333335], [1.59418062E12, 494.0833333333333], [1.59418092E12, 468.48333333333335], [1.59418158E12, 274.85], [1.59418122E12, 414.76666666666665], [1.59418056E12, 488.03333333333336], [1.59418152E12, 469.53333333333336], [1.59418086E12, 474.7], [1.59418116E12, 395.26666666666665], [1.59418146E12, 459.35], [1.5941805E12, 285.78333333333336], [1.5941808E12, 467.48333333333335]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59418158E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.5941805E12, "maxY": 494.0833333333333, "series": [{"data": [[1.5941811E12, 413.26666666666665], [1.5941814E12, 467.48333333333335], [1.59418074E12, 481.73333333333335], [1.59418104E12, 431.1666666666667], [1.59418134E12, 475.3], [1.59418068E12, 486.48333333333335], [1.59418098E12, 442.76666666666665], [1.59418128E12, 442.73333333333335], [1.59418062E12, 494.0833333333333], [1.59418092E12, 468.48333333333335], [1.59418158E12, 274.85], [1.59418122E12, 414.76666666666665], [1.59418056E12, 488.03333333333336], [1.59418152E12, 469.53333333333336], [1.59418086E12, 474.7], [1.59418116E12, 395.26666666666665], [1.59418146E12, 459.35], [1.5941805E12, 285.78333333333336], [1.5941808E12, 467.48333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.5941811E12, 0.016666666666666666], [1.59418068E12, 0.016666666666666666], [1.5941808E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59418158E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

